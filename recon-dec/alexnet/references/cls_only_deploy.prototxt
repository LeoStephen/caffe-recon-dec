input: "data"
input: "label"
input_shape { dim: 1 dim: 3 dim: 227 dim: 227 }
input_shape { dim: 1 dim: 1 dim: 1 dim: 1 }
name:  "AlexNet"
layer {
  name:   "conv1"
  type:   "Convolution"
  top:    "conv1"
  bottom: "data"
  param   { lr_mult: 1 decay_mult: 1 }
  param   { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output:   96
    kernel_size:  11
    stride: 4
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler   { type: "constant" value: 0 }
  }
}
layer {
  name:   "conv1/relu"
  type:   "ReLU"
  top:    "conv1"
  bottom: "conv1"
}
layer {
  name:   "conv1/pool"
  type:   "Pooling"
  top:    "conv1/pool"
  bottom: "conv1"
  pooling_param { pool: MAX kernel_size: 3 stride: 2 }
}
layer {
  name:   "conv2"
  type:   "Convolution"
  top:    "conv2"
  bottom: "conv1/pool"
  param   { lr_mult: 1 decay_mult: 1 }
  param   { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output:   256
    pad:   2
    kernel_size:  5
    group: 2
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler   { type: "constant" value: 0.1 }
  }
}
layer {
  name:   "conv2/relu"
  type:   "ReLU"
  top:    "conv2"
  bottom: "conv2"
}
layer {
  name:   "conv2/pool"
  type:   "Pooling"
  top:    "conv2/pool"
  bottom: "conv2"
  pooling_param { pool: MAX kernel_size: 3 stride: 2 }
}
layer {
  name:   "conv3"
  type:   "Convolution"
  top:    "conv3"
  bottom: "conv2/pool"
  param   { lr_mult: 1 decay_mult: 1 }
  param   { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output:   384
    pad: 1
    kernel_size:  3
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler   { type: "constant" value: 0 }
  }
}
layer {
  name:   "conv3/relu"
  type:   "ReLU"
  top:    "conv3"
  bottom: "conv3"
}
layer {
  name:   "conv4"
  type:   "Convolution"
  top:    "conv4"
  bottom: "conv3"
  param   { lr_mult: 1 decay_mult: 1 }
  param   { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output:   384
    pad:   1
    kernel_size:  3
    group: 2
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler   { type: "constant" value: 0.1 }
  }
}
layer {
  name:   "conv4/relu"
  type:   "ReLU"
  top:    "conv4"
  bottom: "conv4"
}
layer {
  name:   "conv5"
  type:   "Convolution"
  top:    "conv5"
  bottom: "conv4"
  param   { lr_mult: 1 decay_mult: 1 }
  param   { lr_mult: 2 decay_mult: 0 }
  convolution_param {
    num_output:   256
    pad:   1
    kernel_size:  3
    group: 2
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler   { type: "constant" value: 0.1 }
  }
}
layer {
  name:   "conv5/relu"
  type:   "ReLU"
  top:    "conv5"
  bottom: "conv5"
}
layer {
  name:   "conv5/pool"
  type:   "Pooling"
  top:    "conv5/pool"
  bottom: "conv5"
  pooling_param { pool: MAX kernel_size: 3 stride: 2 }
}
layer {
  name:   "fc6"
  type:   "InnerProduct"
  top:    "fc6"
  bottom: "conv5/pool"
  param   { lr_mult: 1 decay_mult: 1 }
  param   { lr_mult: 2 decay_mult: 0 }
  inner_product_param {
    num_output:   4096
    weight_filler { type: "gaussian" std: 0.005 }
    bias_filler   { type: "constant" value: 0.1 }
  }
}
layer {
  name:   "fc6/relu"
  type:   "ReLU"
  top:    "fc6"
  bottom: "fc6"
}
layer {
  name:   "fc6/dropout"
  type:   "Dropout"
  top:    "fc6/dropout"
  bottom: "fc6"
  dropout_param { dropout_ratio: 0.5 }
}
layer {
  name:   "fc7"
  type:   "InnerProduct"
  top:    "fc7"
  bottom: "fc6/dropout"
  param   { lr_mult: 1 decay_mult: 1 }
  param   { lr_mult: 2 decay_mult: 0 }
  inner_product_param {
    num_output:   4096
    weight_filler { type: "gaussian" std: 0.005 }
    bias_filler   { type: "constant" value: 0.1 }
  }
}
layer {
  name:   "fc7/relu"
  type:   "ReLU"
  top:    "fc7"
  bottom: "fc7"
}
layer {
  name:   "fc7/dropout"
  type:   "Dropout"
  top:    "fc7/dropout"
  bottom: "fc7"
  dropout_param { dropout_ratio: 0.5 }
}
layer {
  name:   "fc8"
  type:   "InnerProduct"
  top:    "fc8"
  bottom: "fc7/dropout"
  param   { lr_mult: 1 decay_mult: 1 }
  param   { lr_mult: 2 decay_mult: 0 }
  inner_product_param {
    num_output:   1000
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler   { type: "constant" value: 0 }
  }
}
layer {
  name:   "accuracy"
  type:   "Accuracy"
  top:    "accuracy"
  include { phase: TEST }
  bottom: "fc8"
  bottom: "label"
}
layer {
  name:   "loss"
  type:   "SoftmaxWithLoss"
  top:    "loss"
  bottom: "fc8"
  bottom: "label"
}
